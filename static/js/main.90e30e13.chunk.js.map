{"version":3,"sources":["img/icons/play.svg","img/icons/pause.svg","img/icons/volume.svg","logo.svg","components/functional/AppHeaderView.jsx","components/functional/AllPodcastsView.jsx","components/functional/RecentPodcastsView.jsx","components/functional/PodcastView.jsx","components/helpers.js","redux/actions/actions.js","components/containers/Podcast.jsx","components/containers/Slider.jsx","components/functional/PlayerView.jsx","components/containers/Player.jsx","components/containers/AppWrapper.jsx","App.js","serviceWorker.js","redux/reducers/podcasts-reducer.js","redux/reducers/player-reducer.js","redux/reducers/all-reducers.js","redux/store.js","index.js"],"names":["module","exports","__webpack_require__","p","AppHeader","React","memo","props","react_default","a","createElement","className","id","href","link","src","logo","alt","AllPodcasts","podcasts_array","RecentPodcasts","length","concat","navigator","onLine","PodcastView","shown","Fragment","style","backgroundImage","cover_image","title","publishing_date","timeToSec","prop","time","split","Number","ACTIONS","FETCH_PODCASTS_BEGIN","FETCH_PODCASTS_SUCCESS","FETCH_PODCASTS_FAILURE","UPDATE_PODCASTS","LOAD_MORE_PODCASTS","CHANGE_VOLUME","fetchPodcastsBegin","type","fetchPodcastsSuccess","podcasts","payload","fetchPodcastsFailure","error","setPodcastsState","state","fetchPodcasts","api_link","dispatch","fetch","then","res","text","console","log","xmlToJson","xml","obj","nodeType","attributes","j","attribute","item","nodeName","nodeValue","hasChildNodes","i","childNodes","push","old","DOMParser","parseFromString","rss","channel","map","podcast","index","description","duration","duration_in_sec","source","guid","wideImage","current_time","parsePodcastObject","arr","catch","updatePodcasts","getState","all","all_podcasts","recent","recent_podcasts","counter","cache_counter","new_state","active_podcast","duplicate","to_find","findDuplicate","old_index","new_index","k","undefined","splice","shiftArrayItem","unshift","Podcast","componentWillMount","_this","el","createRef","componentDidMount","loadImage","image","Image","addEventListener","setState","info","update","updateInfo","_this$props","this","active","onClick","ref","functional_PodcastView","Component","connect","Slider","value","progress","drag_size","direction","force_update","dragging","autohide","callback","slider_drag","slider_bar","slider_progress","recalculateOffsets","window","debounce","componentWillUnmount","removeEventListener","componentWillReceiveProps","current","slider_bar_left","getBoundingClientRect","left","slider_bar_width","width","updateProgress","e","additional_props","clientX","new_props","Object","keys","key","devider","allow_progress","pointerDown","pointerUp","cur","Math","round","sec_num","parseInt","floor","hours","minutes","seconds","secToTime","progress_bar_length","onPointerDown","height","PlayerView","playing","play_btn_callback","playIcon","pauseIcon","Slider_Slider","time_callback","volumeIcon","volume","volume_callback","Player","audio","Audio","progressUpdate","audioEnded","togglePlay","play","pause","updated","assign","currentTime","updateAudio","recieveTimeFromSlider","recieveVolumeFromSlider","changeVolume","functional_PlayerView","player","AppWrapper","loadMore","innerHeight","scrollY","document","body","scrollHeight","podcasts_amount","amount_to_display","loadMorePodcasts","amount_to_display_increment","createPodcastsToRender","amount","slice","is_active","containers_Podcast","cacheData","offline","AllPodcastsView","AppHeaderView","RecentPodcastsView","containers_Player","new_count","App","containers_AppWrapper","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialState","loading","allReducers","combineReducers","arguments","_ref","objectSpread","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","applyMiddleware","thunk","subscribe","throttle","stringify","setItem","saveState","ReactDOM","render","es","App_App","getElementById","URL","process","origin","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.90e30e13.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/play.5004d330.svg\";","module.exports = __webpack_public_path__ + \"static/media/pause.07100aab.svg\";","module.exports = __webpack_public_path__ + \"static/media/volume.69de45ca.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.02d30e17.svg\";","import React from 'react';\r\n\r\nconst AppHeader = React.memo(props => {\r\n  return (\r\n    <div className=\"radio__header\">\r\n        <div className=\"container\">\r\n            <div className=\"logo\" id=\"logo\">\r\n                <a href={props.link} className=\"logo__link\">\r\n                    <img src={props.logo} className=\"logo__img\" alt=\"logo\"/>\r\n                </a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  )\r\n});\r\n\r\nexport default AppHeader;","import React from 'react';\r\n\r\nconst AllPodcasts = React.memo(props => {\r\n  return (\r\n    <div className=\"radio__all\">\r\n        <h2 className=\"radio__title alerta large-font\">Podcasts:</h2>\r\n        <div className=\"radio__wrap\">\r\n            {props.podcasts_array}\r\n        </div>\r\n    </div>\r\n  )\r\n});\r\n\r\nexport default AllPodcasts;","import React from 'react'\r\n\r\nconst RecentPodcasts = React.memo(props => {\r\n  if (!props.podcasts_array.length) {\r\n    return  <div className=\"radio__recent radio__recent_hidden\"></div>\r\n  }\r\n\r\n  return (\r\n    <div className=\"radio__recent\">\r\n        <h2 className=\"radio__title alerta large-font\">Recent Played:</h2>\r\n        <div className={`radio__wrap ${navigator.onLine ? 'radio__wrap_latest' : ''}`}>\r\n            {props.podcasts_array}\r\n        </div>\r\n    </div>\r\n  )\r\n});\r\n\r\nexport default RecentPodcasts;","import React from 'react';\r\n\r\nconst PodcastView = React.memo(props =>{\r\n    if (props.shown) {\r\n        return (\r\n            <>\r\n                <div \r\n                    className = \"podcast__cover\"\r\n                    style     = {{backgroundImage: `url(${props.cover_image})`}}\r\n                >\r\n                </div>\r\n                <div className=\"podcast__wrapper\">\r\n                    <div className=\"podcast__title\">\r\n                        <p>{props.title}</p>\r\n                        <p>{props.publishing_date}</p>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n});\r\n\r\nexport default PodcastView;","export function xmlToJson(xml) {\r\n    var obj = {};\r\n    if (xml.nodeType === 1) {\r\n        if (xml.attributes.length > 0) {\r\n        obj[\"@attributes\"] = {};\r\n            for (var j = 0; j < xml.attributes.length; j++) {\r\n                var attribute = xml.attributes.item(j);\r\n                obj[\"@attributes\"][attribute.nodeName] = attribute.nodeValue;\r\n            }\r\n        }\r\n    } else if (xml.nodeType === 3) {\r\n        obj = xml.nodeValue;\r\n    }\r\n    if (xml.hasChildNodes()) {\r\n        for(var i = 0; i < xml.childNodes.length; i++) {\r\n            var item = xml.childNodes.item(i);\r\n            var nodeName = item.nodeName;\r\n            if (typeof(obj[nodeName]) == \"undefined\") {\r\n                obj[nodeName] = xmlToJson(item);\r\n            } else {\r\n                if (typeof(obj[nodeName].push) == \"undefined\") {\r\n                    var old = obj[nodeName];\r\n                    obj[nodeName] = [];\r\n                    obj[nodeName].push(old);\r\n                }\r\n                obj[nodeName].push(xmlToJson(item));\r\n            }\r\n        }\r\n    }\r\n    return obj;\r\n}\r\n\r\nexport function timeToSec(prop) {\r\n    let time = prop.split(':'),\r\n        sec  = 0;\r\n    if (time.length > 2) {\r\n        sec = Number(time[0])*3600 + Number(time[1])*60 + Number(time[2]);\r\n    } else if (time.length === 2) {\r\n        sec = Number(time[0])*60 + Number(time[1]);\r\n    } else {\r\n        sec = Number(time[0]);\r\n    }\r\n    return sec;\r\n}\r\n\r\nexport function secToTime(prop) {\r\n    let sec_num = parseInt(Math.floor(prop), 10);\r\n    let hours   = Math.floor(sec_num / 3600);\r\n    let minutes = Math.floor((sec_num - (hours * 3600)) / 60);\r\n    let seconds = sec_num - (hours * 3600) - (minutes * 60);\r\n\r\n    if (hours   < 10) {hours   = \"0\"+hours;}\r\n    if (minutes < 10) {minutes = \"0\"+minutes;}\r\n    if (seconds < 10) {seconds = \"0\"+seconds;}\r\n    return `${hours}:${minutes}:${seconds}`;\r\n}\r\n\r\nexport function shiftArrayItem(arr, old_index, new_index) {\r\n    if (new_index >= arr.length) {\r\n        var k = new_index - arr.length + 1;\r\n        while (k--) {\r\n            arr.push(undefined);\r\n        }\r\n    }\r\n    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\r\n}\r\n\r\nexport function checkElementVisibility(el) {\r\n    let rect       = el.getBoundingClientRect();\r\n    let elemTop    = rect.top;\r\n    let elemBottom = rect.bottom;\r\n    let isVisible  = (elemTop >= -.8*window.innerHeight) && (elemBottom <= 1.8*window.innerHeight);\r\n    return isVisible;\r\n}\r\n\r\nexport function parsePodcastObject(podcast) {\r\n    return {\r\n        index:              `${Number(podcast['itunes:season']['#text'])}${Number(podcast['itunes:episode']['#text'])}${timeToSec(podcast['itunes:duration']['#text'])}`,\r\n        title:              podcast.title['#text'].split(' - ')[0],\r\n        publishing_date:    podcast.title['#text'].split(' - ')[1],\r\n        description:        podcast.description['#text'],\r\n        duration:           podcast['itunes:duration']['#text'],\r\n        duration_in_sec:    timeToSec(podcast['itunes:duration']['#text']),\r\n        source:             podcast.guid['#text'],\r\n        cover_image:        podcast.wideImage['#text'],\r\n        current_time:       0\r\n    }\r\n}\r\n\r\nexport function findDuplicate(arr, to_find) {\r\n    let duplicate = -1;\r\n    arr.map((item, i) => {\r\n        if (item.index === to_find.index) {\r\n            duplicate = i;\r\n        }\r\n    });\r\n    return duplicate;\r\n}\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('recent');\r\n        if ( serializedState === null) return undefined;\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport const saveState = (state) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('recent', serializedState);\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}","import {xmlToJson, parsePodcastObject, shiftArrayItem, findDuplicate} from '../../components/helpers';\r\n\r\nexport const ACTIONS = {\r\n    FETCH_PODCASTS_BEGIN:       'FETCH_PODCASTS_BEGIN',\r\n    FETCH_PODCASTS_SUCCESS:     'FETCH_PODCASTS_SUCCESS',\r\n    FETCH_PODCASTS_FAILURE:     'FETCH_PODCASTS_FAILURE',\r\n    UPDATE_PODCASTS:            'UPDATE_PODCASTS',\r\n    LOAD_MORE_PODCASTS:         'LOAD_MORE_PODCASTS',\r\n    CHANGE_VOLUME:              'CHANGE_VOLUME'\r\n}\r\n\r\nexport const fetchPodcastsBegin = () => ({\r\n  type: ACTIONS.FETCH_PODCASTS_BEGIN\r\n});\r\n\r\nexport const fetchPodcastsSuccess = podcasts => ({\r\n  type: ACTIONS.FETCH_PODCASTS_SUCCESS,\r\n  payload: podcasts\r\n});\r\n\r\nexport const fetchPodcastsFailure = error => ({\r\n  type: ACTIONS.FETCH_PODCASTS_FAILURE,\r\n  payload: error\r\n});\r\n\r\nexport const setPodcastsState = state => ({\r\n    type: ACTIONS.UPDATE_PODCASTS,\r\n    payload: state\r\n});\r\n\r\nexport const loadMorePodcasts = new_count => ({\r\n    type: ACTIONS.LOAD_MORE_PODCASTS,\r\n    payload: new_count\r\n});\r\n\r\nexport const changeVolume = volume => ({\r\n    type: ACTIONS.CHANGE_VOLUME,\r\n    payload: volume\r\n});\r\n\r\nexport function fetchPodcasts(api_link) {\r\n    return dispatch => {\r\n        dispatch(fetchPodcastsBegin());\r\n        return fetch(api_link)\r\n            .then(res => res.text())\r\n            .then(text => {\r\n                console.log('recieved data')\r\n                let arr = xmlToJson(new DOMParser().parseFromString(text, \"text/xml\")).rss.channel.item\r\n                            .map((podcast, index) => parsePodcastObject(podcast, index));\r\n                return arr;\r\n            })\r\n            .then(arr => dispatch(fetchPodcastsSuccess(arr)))\r\n            .catch(error => dispatch(fetchPodcastsFailure(error)));\r\n    };\r\n}\r\n\r\n// export function fetchPodcasts(api_link) {\r\n//     return dispatch => {\r\n//         dispatch(fetchPodcastsBegin());\r\n\r\n//         return async function() {\r\n//             const responce = await fetch(api_link);\r\n//             const data     = await responce.text();\r\n//             // if (data) {\r\n\r\n//             // } else {\r\n\r\n//             // }\r\n//             console.log(data);\r\n//         }\r\n//         // return fetch(api_link)\r\n//         //     .then(res => res.text())\r\n//         //     .then(text => {\r\n//         //         let arr = xmlToJson(new DOMParser().parseFromString(text, \"text/xml\")).rss.channel.item\r\n//         //                     .map((podcast, index) => parsePodcastObject(podcast, index));\r\n//         //         return arr;\r\n//         //     })\r\n//         //     .then(arr => dispatch(fetchPodcastsSuccess(arr)))\r\n//         //     .catch(error => dispatch(fetchPodcastsFailure(error)));\r\n//     };\r\n// }\r\n\r\nexport function updatePodcasts(podcast) {\r\n    return (dispatch, getState) => {\r\n        let state     = getState().podcasts;\r\n        let all       = state.all_podcasts;\r\n        let recent    = state.recent_podcasts;\r\n        let counter   = state.cache_counter;\r\n        let new_state = {\r\n            active_podcast: podcast\r\n        };\r\n\r\n        all.map((p, i) => {\r\n            if (p.index === podcast.index) {\r\n                all[i] = podcast;\r\n            }\r\n        });\r\n\r\n        new_state.all_podcasts = all;\r\n\r\n        let duplicate = findDuplicate(recent, podcast);\r\n        if (duplicate > -1) {\r\n            shiftArrayItem(recent, duplicate, 0);\r\n            recent[0] = podcast;\r\n        } else {\r\n            recent.unshift(podcast);\r\n        }\r\n        if (recent.length > counter) recent = recent.splice(0, counter);\r\n\r\n        new_state.recent_podcasts = recent;\r\n\r\n        dispatch(setPodcastsState(new_state));\r\n    }\r\n}","import React, { Component }     from 'react';\r\n\r\nimport PodcastView              from '../functional/PodcastView'\r\nimport {connect}                from 'react-redux';\r\nimport {updatePodcasts}   from '../../redux/actions/actions';\r\n\r\n\r\nclass Podcast extends Component {\r\n\tstate = {\r\n\t\tshown: false\r\n\t}\r\n\r\n\r\n\tcomponentWillMount = () => {\r\n\t\tthis.el = React.createRef();\r\n\t}\r\n\r\n\r\n\tcomponentDidMount = () => {\r\n\t\tthis.loadImage();\r\n\t}\r\n\r\n\r\n\tloadImage = () => {\r\n\t\tthis.image     = new Image();\r\n\t\tthis.image.addEventListener('load', () => {\r\n\t\t\tdelete this.image;\r\n\t\t\tthis.setState({shown: true});\r\n\t\t});\r\n\t\tthis.image.src = this.props.info.cover_image;\r\n\t}\r\n\r\n\r\n\tupdate = () => {\r\n\t\tthis.props.updateInfo(this.props.info);\r\n\t}\r\n\r\n\r\n    render() {\r\n\t\tconst {info, active} = this.props;\r\n\r\n        return (\r\n\t\t\t<div \r\n\t\t\t\tclassName = {`podcast roboto ${this.state.shown ? 'podcast_shown' : ''} ${active ? 'podcast_active' : ''}`}\r\n\t\t\t\tonClick   = {this.update}\r\n\t\t\t\tref       = {this.el}\r\n\t\t\t>\r\n\t\t\t\t<PodcastView \r\n\t\t\t\t\tshown           = {this.state.shown}\r\n\t\t\t\t\tactive          = {active}\r\n\t\t\t\t\tcover_image     = {info.cover_image}\r\n\t\t\t\t\ttitle           = {info.title}\r\n\t\t\t\t\tpublishing_date = {info.publishing_date}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n\tstate => ({\r\n\t\tstate: state.podcasts.active_podcast\r\n\t}),\r\n\tdispatch => ({\r\n\t\tupdateInfo: info => {\r\n\t\t\tdispatch(updatePodcasts(info));\r\n\t\t}\r\n\t})\r\n)(Podcast);","import React, { Component } from 'react';\r\nimport     {secToTime}      from '../helpers';\r\nimport     {debounce}       from 'lodash';\r\n\r\n\r\nexport default class Slider extends Component {\r\n    state = {\r\n        type:             this.props.type,\r\n        duration:         this.props.duration,\r\n        value:            this.props.value,\r\n        progress:         this.props.progress,\r\n        drag_size:        this.props.drag_size,\r\n        direction:        this.props.direction,\r\n        force_update:     this.props.force_update,\r\n        dragging:         false,\r\n        autohide:         this.props.autohide\r\n    };\r\n\r\n\r\n    componentWillMount = () => {\r\n        this.callback           = this.props.callback;\r\n        this.slider_drag        = React.createRef();\r\n        this.slider_bar         = React.createRef();\r\n        this.slider_progress    = React.createRef();\r\n    }\r\n\r\n    \r\n    componentDidMount = () => {\r\n        this.recalculateOffsets();\r\n        window.addEventListener('resize', debounce(this.recalculateOffsets, 400));\r\n    }\r\n\r\n\r\n    componentWillUnmount = () => {\r\n        window.removeEventListener('resize', debounce(this.recalculateOffsets, 400));\r\n    }\r\n\r\n\r\n    componentWillReceiveProps = props => {\r\n        if (props !== this.props && this.state.dragging === false) {\r\n            this.setState(props);\r\n        }\r\n    }\r\n\r\n\r\n    recalculateOffsets = () => {\r\n        if (this.slider_bar.current != null) {\r\n            this.slider_bar_left  = this.slider_bar.current.getBoundingClientRect().left;\r\n            this.slider_bar_width = this.slider_bar.current.getBoundingClientRect().width;\r\n        }\r\n    };\r\n\r\n\r\n    updateProgress = (e, additional_props) => {\r\n        let left     = e.clientX;\r\n        let progress = this.state.value*((left - this.slider_bar_left)/this.slider_bar_width);\r\n\r\n        progress = progress > this.state.value ? this.state.value : progress < 0 ? 0 : progress;\r\n\r\n        let new_props = {\r\n            progress: progress\r\n        }\r\n\r\n        if (additional_props !== undefined) {\r\n            Object.keys(additional_props).map(key => {\r\n               return new_props[key] = additional_props[key];\r\n            });\r\n        }\r\n\r\n        this.setState(new_props, \r\n            () => {\r\n                if (this.state.dragging === false || this.state.force_update) {\r\n                    let devider = this.state.type === 'volume' ? 100 : 1;\r\n                    this.callback(progress/devider);\r\n                    this.allow_progress = false;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    pointerDown = () => {\r\n        this.setState({\r\n                        dragging: true\r\n                      }, () => this.allow_progress = true);\r\n        window.addEventListener('pointermove', this.updateProgress);\r\n        window.addEventListener('pointerup', this.pointerUp);\r\n    }\r\n\r\n\r\n    pointerUp = e => {\r\n        window.removeEventListener('pointermove', this.updateProgress);\r\n        window.removeEventListener('pointerup', this.pointerUp);\r\n        this.updateProgress(e, {dragging: false});\r\n    }\r\n\r\n    \r\n    render() {\r\n\r\n        let cur = this.state.type === 'volume' ? Math.round(this.state.progress) : secToTime(this.state.progress);\r\n        let progress_bar_length  = `${this.state.progress/this.state.value*100}%`;\r\n\r\n\r\n        return (\r\n            <div className={`slider ${this.state.dragging ? 'slider_dragging' : ''} ${this.state.autohide ? 'slider_autohide' : ''}`}>\r\n                <span \r\n                    className = \"slider__bar\" \r\n                    ref       = {this.slider_bar} \r\n                    onClick   = {this.pointerUp}\r\n                >\r\n                    <span \r\n                        className = \"slider__cur\"\r\n                        ref       = {this.slider_progress}\r\n                        style     = {{width: progress_bar_length}}\r\n                    >\r\n                    </span>\r\n                    <span \r\n                        className     = \"slider__drag\" \r\n                        onPointerDown = {this.pointerDown}\r\n                        ref           = {this.slider_drag}\r\n                        style         = {{\r\n                                            left:   progress_bar_length, \r\n                                            width:  `${this.state.drag_size}px`, \r\n                                            height: `${this.state.drag_size}px`\r\n                                        }}\r\n                    >\r\n                    </span>\r\n                </span>\r\n                <div className=\"slider__range roboto xxsmall-font\">\r\n                    <span className=\"slider__range-cur\">{cur}</span>\r\n                    <span className=\"slider__range-length\">{this.state.duration}</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport \t     Slider         from '../containers/Slider';\r\nimport      playIcon        from \"../../img/icons/play.svg\";\r\nimport      pauseIcon       from \"../../img/icons/pause.svg\";\r\nimport      volumeIcon      from \"../../img/icons/volume.svg\";\r\n\r\nconst PlayerView = React.memo(props => {\r\n    return (\r\n        <div className={`radio__player-wrap${props.active ? ' radio__player-wrap_active' : ''}`}>\r\n            <div \r\n                className={`player${props.playing ? ' player_playing' : ''}`} \r\n                id=\"player\"\r\n            >\r\n                <div className=\"container\">\r\n                    <div className=\"player__wrap\">\r\n                        <div className=\"player__cover\">\r\n                            <img \r\n                                src={props.cover_image} \r\n                                alt=\"podcast cover\"\r\n                            />\r\n                            <h3 className=\"player__title roboto small-font\">\r\n                                <p>{props.title}</p>\r\n                                <p>{props.publishing_date}</p>\r\n                            </h3>\r\n                        </div>\r\n                        <div className=\"player__controls\">\r\n                            <div className=\"player__row player__row_center\">\r\n                                <span className=\"player__playback\" onClick={props.play_btn_callback}>\r\n                                    <img \r\n                                        className=\"player__icon player__icon_play\" \r\n                                        src={playIcon} \r\n                                        alt=\"play icon\"\r\n                                    />\r\n                                    <img \r\n                                        className=\"player__icon player__icon_pause\" \r\n                                        src={pauseIcon} \r\n                                        alt=\"pause icon\"\r\n                                    />\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"player__time\">\r\n                                <Slider \r\n                                    type           = 'time' //'time' or 'volume'\r\n                                    duration       = {props.podcast.duration}\r\n                                    value          = {props.podcast.duration_in_sec}\r\n                                    progress       = {props.podcast.current_time}\r\n                                    drag_size      = {10}\r\n                                    direction      = 'horizontal'\r\n                                    callback       = {props.time_callback}\r\n                                    force_update   = {false}\r\n                                    autohide       = {false}\r\n                                />\r\n                            </div>\r\n                            <div className=\"player__volume\">\r\n                                <img \r\n                                    src={volumeIcon} \r\n                                    className=\"player__icon player__icon_volume\" \r\n                                    alt=\"volume icon\"\r\n                                />\r\n                                <Slider \r\n                                    type           = 'volume' //'time' or 'volume'\r\n                                    duration       = {100}\r\n                                    value          = {100}\r\n                                    progress       = {props.volume*100 || 100}\r\n                                    drag_size      = {10}\r\n                                    direction      = 'horizontal'\r\n                                    callback        = {props.volume_callback}\r\n                                    force_update   = {true}\r\n                                    autohide       = {true}\r\n                                />\r\n                            </div>\r\n                        </div> \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\n\r\nexport default PlayerView;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {changeVolume, updatePodcasts} from '../../redux/actions/actions'\r\n\r\n\r\nimport PlayerView from '../functional/PlayerView';\r\n\r\n\r\nclass Player extends Component {\r\n\tstate = {\r\n\t\tplaying: false\r\n\t};\r\n\r\n\r\n\tcomponentWillMount = () => {\r\n\t\tthis.audio        = new Audio();\r\n\t\tthis.audio.volume = 1;\r\n\t\tthis.audio.addEventListener('timeupdate', this.progressUpdate);\r\n\t\tthis.audio.addEventListener('ended', this.audioEnded);\r\n\t}\r\n\t\r\n\taudioEnded = () => {\r\n\t\tthis.setState({\r\n\t\t\tplaying: false\r\n\t\t})\r\n\t}\r\n\r\n\r\n\ttogglePlay = () => {\r\n\t\tthis.setState({playing: !this.state.playing},\r\n\t\t\t() => {\r\n\t\t\t\tif (this.state.playing) {\r\n\t\t\t\t\tthis.audio.play();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.audio.pause();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tprogressUpdate = () => {\r\n\t\tlet updated = Object.assign({}, this.props.podcast);\r\n\t\tupdated.current_time = this.audio.currentTime;\r\n\t\tthis.props.updateInfo(updated);\r\n\t}\r\n\r\n\r\n\tupdateAudio = () => {\r\n\t\tif (this.audio.src !== this.props.podcast.source) {\r\n\t\t\tthis.audio.src         = this.props.podcast.source;\r\n\t\t\tthis.audio.currentTime = this.props.podcast.current_time || 0;\r\n\t\t\tif (this.state.playing) {\r\n\t\t\t\tthis.audio.play();\r\n\t\t\t} else {\r\n\t\t\t\tthis.audio.pause();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\r\n\trecieveTimeFromSlider = time => {\r\n\t\tthis.audio.currentTime = time;\r\n\t}\r\n\r\n\r\n\trecieveVolumeFromSlider = volume => {\r\n\t\tthis.audio.volume = volume;\r\n\t\tthis.props.changeVolume(volume);\r\n\t}\r\n\t\r\n\r\n\trender() {\r\n\t\tconst {volume, podcast} = this.props;\r\n\t\tthis.updateAudio();\r\n\t\r\n\t\treturn <PlayerView \r\n\t\t\tactive            = {Object.keys(podcast).length}\r\n\t\t\tpodcast           = {podcast}\r\n\t\t\tplaying           = {this.state.playing}\r\n\t\t\tcover_image       = {podcast.cover_image}\r\n\t\t\ttitle             = {podcast.title}\r\n\t\t\tpublishing_date   = {podcast.publishing_date}\r\n\t\t\tplay_btn_callback = {this.togglePlay}\r\n\t\t\ttime_callback     = {this.recieveTimeFromSlider}\r\n\t\t\tvolume_callback   = {this.recieveVolumeFromSlider}\r\n\t\t\tvolume            = {volume}\r\n\t\t/>\r\n\t}\r\n}\r\n\r\nexport default connect(\r\n\tstate => ({\r\n\t\tvolume:       state.player.volume,\r\n\t\tpodcast:      state.podcasts.active_podcast\r\n\t}),\r\n\tdispatch => ({\r\n\t\tupdateInfo: info => {\r\n\t\t\tdispatch(updatePodcasts(info));\r\n\t\t},\r\n\t\tchangeVolume: volume => {\r\n\t\t\tdispatch(changeVolume(volume));\r\n\t\t}\r\n\t})\r\n)(Player); ","import React, { Component }              from 'react';\r\nimport {debounce}                        from 'lodash';\r\nimport LoaderView                        from '../functional/loader';\r\nimport AppHeader                         from '../functional/AppHeaderView';\r\nimport AllPodcasts                       from '../functional/AllPodcastsView';\r\nimport RecentPodcasts                    from '../functional/RecentPodcastsView';\r\nimport Podcast                           from './Podcast';\r\nimport Player                            from './Player';\r\nimport logo                              from '../../logo.svg';\r\nimport {connect}                         from 'react-redux';\r\nimport {fetchPodcasts, loadMorePodcasts} from '../../redux/actions/actions';\r\n\r\n\r\nclass AppWrapper extends Component {\r\n\r\n    componentDidMount = () => {\r\n        // if (navigator.onLine) {\r\n            this.props.fetch(this.props.podcasts.api_link);\r\n        // }\r\n\r\n        window.addEventListener('scroll', debounce(this.loadMore, 300));\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        window.removeEventListener('scroll', debounce(this.loadMore, 300));\r\n    }\r\n\r\n    loadMore = () => {\r\n        if (\r\n            (window.innerHeight + window.scrollY) >= document.body.scrollHeight - 100 &&\r\n            this.props.podcasts.podcasts_amount >= this.props.podcasts.amount_to_display\r\n        ) {\r\n            this.props.loadMorePodcasts(this.props.podcasts.amount_to_display + \r\n                                        this.props.podcasts.amount_to_display_increment);\r\n        }\r\n    }\r\n\r\n    createPodcastsToRender = (arr, amount) => {\r\n        let podcasts_to_render = amount ? arr.slice(0, amount) : arr;\r\n        return podcasts_to_render.map(podcast => {\r\n            let is_active = podcast === this.props.podcasts.active_podcast ? true : false;\r\n            return <Podcast\r\n                        key    = {podcast.index}\r\n                        info   = {podcast}\r\n                        active = {is_active}\r\n                    />\r\n        })\r\n    }\r\n\r\n    cacheData = () => {\r\n        if (!('indexedDB' in window)) {\r\n            console.log('This browser doesn`t support IndexedDB');\r\n            return;\r\n          }\r\n    }\r\n\r\n    render() {\r\n        const {podcasts} = this.props;\r\n        let all     = '';\r\n        let offline = !navigator.onLine;\r\n        // let loader = '';\r\n\r\n        // if (podcasts.loading) {\r\n        //     loader = <LoaderView />\r\n        // }\r\n\r\n        if (!offline) {\r\n            all = <AllPodcasts \r\n                    podcasts_array = {this.createPodcastsToRender(podcasts.all_podcasts, podcasts.amount_to_display)} \r\n                  />\r\n        }\r\n\r\n        return (\r\n            <div className={`radio ${offline ? 'radio_offline' : ''}`} id=\"radio\">\r\n                {/* {loader} */}\r\n                {/* <button onClick={this.cacheData}>Click</button> */}\r\n                <AppHeader \r\n                    link = '#1'\r\n                    logo = {logo}\r\n                />\r\n                <RecentPodcasts\r\n                    podcasts_array = {this.createPodcastsToRender(podcasts.recent_podcasts)} \r\n                />\r\n                {all}\r\n                <Player/>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        podcasts: state.podcasts\r\n    }),\r\n    dispatch => ({\r\n        fetch: link => {\r\n            dispatch(fetchPodcasts(link));\r\n        },\r\n        loadMorePodcasts: new_count => {\r\n            dispatch(loadMorePodcasts(new_count));\r\n        }\r\n    })\r\n)(AppWrapper);","import React, { Component } from 'react';\nimport      AppWrapper      from './components/containers/AppWrapper';\nimport './App.sass'\n\n\nexport default class App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<AppWrapper/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  // process.env.NODE_ENV === 'production' && \n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker-custom.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // console.log(\n          //   'This web app is being served cache-first by a service ' +\n          //     'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          // );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n\n      // console.log('Yoohoo! SW is registered. Nice job!:)');\n\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // console.log(\n              //   'New content is available and will be used when all ' +\n              //     'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              // );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ACTIONS} from '../actions/actions';\r\n\r\nconst initialState = {\r\n    api_link: 'https://cors-anywhere.herokuapp.com/tools.planetradio.co.uk/core/podcasts/rss.php?name=radio-1-norge',\r\n    all_podcasts: [],\r\n\tactive_podcast: {},\r\n\trecent_podcasts: [],\r\n\tloading:  false,\r\n\terror:    null,\r\n\tpodcasts_amount: null,\r\n    amount_to_display: 12,\r\n\tamount_to_display_increment: 12,\r\n\tcache_counter: 5\r\n}\r\n\r\nexport default function podcastsReducer(\r\n\tstate = initialState,\r\n\t{type, payload}\r\n) {\r\n\tswitch (type) {\r\n\t\tcase ACTIONS.FETCH_PODCASTS_BEGIN:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: true,\r\n\t\t\t\terror:   null\r\n\t\t\t}\r\n\t\tcase ACTIONS.FETCH_PODCASTS_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tall_podcasts: payload,\r\n\t\t\t\tpodcasts_amount: payload.length,\r\n\t\t\t\tloading:      false,\r\n\t\t\t\terror:        null\r\n\t\t\t}\r\n\t\tcase ACTIONS.FETCH_PODCASTS_FAILURE:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: false,\r\n\t\t\t\terror:   payload\r\n            }\r\n        case ACTIONS.LOAD_MORE_PODCASTS:\r\n            return {\r\n                ...state,\r\n                amount_to_display: payload\r\n\t\t\t}\r\n\t\tcase ACTIONS.UPDATE_PODCASTS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tactive_podcast: payload.active_podcast,\r\n\t\t\t\tall_podcasts: payload.all_podcasts,\r\n\t\t\t\trecent_podcasts: payload.recent_podcasts\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import {ACTIONS} from '../actions/actions';\r\n\r\nconst initialState = {\r\n    volume:       1\r\n}\r\n\r\nexport default function playerReducer(\r\n    state = initialState,\r\n    {type, payload}\r\n) {\r\n    switch (type) {\r\n        case ACTIONS.CHANGE_VOLUME: \r\n            return {\r\n                ...state,\r\n                volume: payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport podcastsReducer   from './podcasts-reducer';\r\nimport playerReducer     from './player-reducer';\r\n\r\nconst allReducers = combineReducers({\r\n    podcasts: podcastsReducer,\r\n    player:   playerReducer\r\n});\r\n\r\nexport default allReducers;","import { \r\n    applyMiddleware, \r\n    compose,  \r\n    createStore \r\n} from \"redux\";\r\nimport allReducers from \"./reducers/all-reducers\";\r\nimport    thunk    from 'redux-thunk';\r\nimport  throttle  from 'lodash/throttle';\r\nimport { saveState, loadState } from \"../components/helpers\";\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst persistedState  = loadState();\r\n\r\nconst store =  createStore(\r\n    allReducers,\r\n    persistedState,\r\n    composeEnhancer(applyMiddleware(thunk))\r\n);\r\n\r\nstore.subscribe(throttle(() => {\r\n    saveState({\r\n        podcasts: store.getState().podcasts\r\n    })\r\n}, 1000));\r\n\r\nexport default store;","import React      from 'react';\nimport ReactDOM   from 'react-dom';\nimport App        from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport    store   from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\nserviceWorker.register();"],"sourceRoot":""}